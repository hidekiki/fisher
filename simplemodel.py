import numpy as np
from fishfun import P, qmin, qmax, Fshape, allparam, T

param = ["fnl", "b10", "b20", "sig", "R"] #ugly but no choice for now

###### power spectrum ######
def P_integrand(k,q,x,(fnlfid ,b10fid, b20fid, b01fid, b11fid, b02fid, chi1fid, w10fid, sigfid, Rfid)):
    return (0.002551020408163265*((196.*(1. + b10fid)**2*P(k))/(qmax - 1.*qmin) + (0.10132118364233778*(7.*b20fid*q**3 + 7.*(1. + b10fid)*k**3*x - 14.*b20fid*k*q**2*x + k**2*q*(3. + 7.*b20fid - 10.*x**2 + b10fid*(7. - 14.*x**2)))**2*P(q)*P(np.sqrt(k**2 + q**2 - 2.*k*q*x)))/(2.718281828459045**(2.*q*Rfid**2*(q - 1.*k*x))*(k**2 + q**2 - 2.*k*q*x)**2)))/2.718281828459045**(0.3333333333333333*k**2*(3.*Rfid**2 + sigfid**2))

###### bispectrum ######
def B_integrand(k,q,x,(fnlfid ,b10fid, b20fid, b01fid, b11fid, b02fid, chi1fid, w10fid, sigfid, Rfid)):
    return (0.03571428571428571*(1. + b10fid)**2*(2.718281828459045**(k[0]**2*Rfid**2)*k[0]**2*(2.*k[0]**4 + (-5. - 7.*b10fid)*k[1]**4 + (10. + 14.*b10fid + 14.*b20fid)*k[1]**2*k[2]**2 + (-5. - 7.*b10fid)*k[2]**4 + (3. + 7.*b10fid)*k[0]**2*(k[1]**2 + k[2]**2))*P(k[1])*P(k[2]) + P(k[0])*(2.718281828459045**(k[2]**2*Rfid**2)*k[2]**2*((-5. - 7.*b10fid)*k[0]**4 + (-5. - 7.*b10fid)*k[1]**4 + (3. + 7.*b10fid)*k[1]**2*k[2]**2 + 2.*k[2]**4 + k[0]**2*((10. + 14.*b10fid + 14.*b20fid)*k[1]**2 + (3. + 7.*b10fid)*k[2]**2))*P(k[1]) + 2.718281828459045**(k[1]**2*Rfid**2)*k[1]**2*((-5. - 7.*b10fid)*k[0]**4 + 2.*k[1]**4 + (3. + 7.*b10fid)*k[1]**2*k[2]**2 + (-5. - 7.*b10fid)*k[2]**4 + k[0]**2*((3. + 7.*b10fid)*k[1]**2 + (10. + 14.*b10fid + 14.*b20fid)*k[2]**2))*P(k[2]))))/(2.718281828459045**(0.16666666666666666*(k[0]**2 + k[1]**2 + k[2]**2)*(6.*Rfid**2 + sigfid**2))*k[0]**2*k[1]**2*k[2]**2*(qmax - 1.*qmin))


###### power spectrum derivative ######
def DP_integrand(k,q,x,(fnlfid ,b10fid, b20fid, b01fid, b11fid, b02fid, chi1fid, w10fid, sigfid, Rfid),par):
    return np.asarray(((-0.0036186137015120634*2.718281828459045**(-1.*q**2*Rfid**2 - 0.3333333333333333*k**2*(3.*Rfid**2 + sigfid**2) + k*q*Rfid**2*x)*(1. + b10fid)*q*(-7.*b20fid*q**3 - 7.*(1. + b10fid)*k**3*x + 14.*b20fid*k*q**2*x + k**2*q*(-3. - 7.*b20fid + 10.*x**2 + 7.*b10fid*(-1. + 2.*x**2)))*Fshape(q,np.sqrt(k**2 + q**2 - 2.*k*q*x),k))/(k**2 + q**2 - 2.*k*q*x),(0.03571428571428571*((28.*(1. + b10fid)*P(k))/(qmax - 1.*qmin) + (0.10132118364233778*k**2*(q + k*x - 2.*q*x**2)*(7.*b20fid*q**3 + 7.*(1. + b10fid)*k**3*x - 14.*b20fid*k*q**2*x + k**2*q*(3. + 7.*b20fid - 10.*x**2 + b10fid*(7. - 14.*x**2)))*P(q)*P(np.sqrt(k**2 + q**2 - 2.*k*q*x)))/(2.718281828459045**(2.*q*Rfid**2*(q - 1.*k*x))*(k**2 + q**2 - 2.*k*q*x)**2)))/2.718281828459045**(0.3333333333333333*k**2*(3.*Rfid**2 + sigfid**2)),(0.0036186137015120634*2.718281828459045**(-2.*q**2*Rfid**2 - 0.3333333333333333*k**2*(3.*Rfid**2 + sigfid**2) + 2.*k*q*Rfid**2*x)*q*(7.*b20fid*q**3 + 7.*(1. + b10fid)*k**3*x - 14.*b20fid*k*q**2*x + k**2*q*(3. + 7.*b20fid - 10.*x**2 + b10fid*(7. - 14.*x**2)))*P(q)*P(np.sqrt(k**2 + q**2 - 2.*k*q*x)))/(k**2 + q**2 - 2.*k*q*x),(0.0017006802721088435*k**2*sigfid*((-196.*(1. + b10fid)**2*P(k))/(qmax - 1.*qmin) - (0.10132118364233778*(7.*b20fid*q**3 + 7.*(1. + b10fid)*k**3*x - 14.*b20fid*k*q**2*x + k**2*q*(3. + 7.*b20fid - 10.*x**2 + b10fid*(7. - 14.*x**2)))**2*P(q)*P(np.sqrt(k**2 + q**2 - 2.*k*q*x)))/(2.718281828459045**(2.*q*Rfid**2*(q - 1.*k*x))*(k**2 + q**2 - 2.*k*q*x)**2)))/2.718281828459045**(0.3333333333333333*k**2*(3.*Rfid**2 + sigfid**2)),(0.00510204081632653*Rfid*((-196.*(1. + b10fid)**2*k**2*P(k))/(qmax - 1.*qmin) - (0.10132118364233778*(k**2 + 2.*q**2 - 2.*k*q*x)*(7.*b20fid*q**3 + 7.*(1. + b10fid)*k**3*x - 14.*b20fid*k*q**2*x + k**2*q*(3. + 7.*b20fid - 10.*x**2 + b10fid*(7. - 14.*x**2)))**2*P(q)*P(np.sqrt(k**2 + q**2 - 2.*k*q*x)))/(2.718281828459045**(2.*q*Rfid**2*(q - 1.*k*x))*(k**2 + q**2 - 2.*k*q*x)**2)))/2.718281828459045**(0.3333333333333333*k**2*(3.*Rfid**2 + sigfid**2))))[param.index(par)]

###### bispectrum derivative ######
def DB_integrand(k,q,x,(fnlfid ,b10fid, b20fid, b01fid, b11fid, b02fid, chi1fid, w10fid, sigfid, Rfid),par):
    return np.asarray(((0.5*(1. + b10fid)**3*Fshape(k[0],k[1],k[2]))/(2.718281828459045**(0.16666666666666666*(k[0]**2 + k[1]**2 + k[2]**2)*(3.*Rfid**2 + sigfid**2))*(qmax - 1.*qmin)) + (0.00012923620362543083*(1. + b10fid)*q*((-1.*((((5. + 7.*b10fid)*k[0]**4 + (k[1]**2 - 1.*k[2]**2)*((5. + 7.*b10fid)*k[1]**2 + 2.*k[2]**2) - 1.*k[0]**2*(2.*(5. + 7.*b10fid + 7.*b20fid)*k[1]**2 + (3. + 7.*b10fid)*k[2]**2))*(7.*b20fid*q**3 + 7.*(1. + b10fid)*k[1]**3*x - 14.*b20fid*k[1]*q**2*x + k[1]**2*q*(3. + 7.*b20fid - 10.*x**2 + b10fid*(7. - 14.*x**2)))*Fshape(k[1],q,np.sqrt(k[1]**2 + q**2 - 2.*k[1]*q*x)))/(2.718281828459045**(0.5*Rfid**2*(k[0]**2 + 2.*(k[1]**2 + q**2 - 1.*k[1]*q*x)))*k[1]**2*(k[1]**2 + q**2 - 2.*k[1]*q*x)) + (((5. + 7.*b10fid)*k[0]**4 - 1.*(k[1]**2 - 1.*k[2]**2)*(2.*k[1]**2 + (5. + 7.*b10fid)*k[2]**2) - 1.*k[0]**2*((3. + 7.*b10fid)*k[1]**2 + 2.*(5. + 7.*b10fid + 7.*b20fid)*k[2]**2))*(7.*b20fid*q**3 + 7.*(1. + b10fid)*k[2]**3*x - 14.*b20fid*k[2]*q**2*x + k[2]**2*q*(3. + 7.*b20fid - 10.*x**2 + b10fid*(7. - 14.*x**2)))*Fshape(k[2],q,np.sqrt(k[2]**2 + q**2 - 2.*k[2]*q*x)))/(2.718281828459045**(0.5*Rfid**2*(k[0]**2 + 2.*(k[2]**2 + q**2 - 1.*k[2]*q*x)))*k[2]**2*(k[2]**2 + q**2 - 2.*k[2]*q*x)))*P(k[0]))/(2.718281828459045**(0.5*k[0]**2*Rfid**2)*k[0]**2) + (((-1.*((5. + 7.*b10fid)*k[0]**4 + (k[1]**2 - 1.*k[2]**2)*((5. + 7.*b10fid)*k[1]**2 + 2.*k[2]**2) - 1.*k[0]**2*(2.*(5. + 7.*b10fid + 7.*b20fid)*k[1]**2 + (3. + 7.*b10fid)*k[2]**2))*(7.*b20fid*q**3 + 7.*(1. + b10fid)*k[0]**3*x - 14.*b20fid*k[0]*q**2*x + k[0]**2*q*(3. + 7.*b20fid - 10.*x**2 + b10fid*(7. - 14.*x**2)))*Fshape(k[0],q,np.sqrt(k[0]**2 + q**2 - 2.*k[0]*q*x)))/(2.718281828459045**(0.5*Rfid**2*(2.*k[0]**2 + k[1]**2 + 2.*q**2 - 2.*k[0]*q*x))*k[0]**2*(k[0]**2 + q**2 - 2.*k[0]*q*x)) + ((2.*k[0]**4 - 1.*(5. + 7.*b10fid)*k[1]**4 + 2.*(5. + 7.*b10fid + 7.*b20fid)*k[1]**2*k[2]**2 - 1.*(5. + 7.*b10fid)*k[2]**4 + (3. + 7.*b10fid)*k[0]**2*(k[1]**2 + k[2]**2))*(7.*b20fid*q**3 + 7.*(1. + b10fid)*k[2]**3*x - 14.*b20fid*k[2]*q**2*x + k[2]**2*q*(3. + 7.*b20fid - 10.*x**2 + b10fid*(7. - 14.*x**2)))*Fshape(k[2],q,np.sqrt(k[2]**2 + q**2 - 2.*k[2]*q*x)))/(2.718281828459045**(0.5*Rfid**2*(k[1]**2 + 2.*(k[2]**2 + q**2 - 1.*k[2]*q*x)))*k[2]**2*(k[2]**2 + q**2 - 2.*k[2]*q*x)))*P(k[1]))/(2.718281828459045**(0.5*k[1]**2*Rfid**2)*k[1]**2) + (((-1.*((5. + 7.*b10fid)*k[0]**4 - 1.*(k[1]**2 - 1.*k[2]**2)*(2.*k[1]**2 + (5. + 7.*b10fid)*k[2]**2) - 1.*k[0]**2*((3. + 7.*b10fid)*k[1]**2 + 2.*(5. + 7.*b10fid + 7.*b20fid)*k[2]**2))*(7.*b20fid*q**3 + 7.*(1. + b10fid)*k[0]**3*x - 14.*b20fid*k[0]*q**2*x + k[0]**2*q*(3. + 7.*b20fid - 10.*x**2 + b10fid*(7. - 14.*x**2)))*Fshape(k[0],q,np.sqrt(k[0]**2 + q**2 - 2.*k[0]*q*x)))/(2.718281828459045**(0.5*Rfid**2*(2.*k[0]**2 + k[2]**2 + 2.*q**2 - 2.*k[0]*q*x))*k[0]**2*(k[0]**2 + q**2 - 2.*k[0]*q*x)) + ((2.*k[0]**4 - 1.*(5. + 7.*b10fid)*k[1]**4 + 2.*(5. + 7.*b10fid + 7.*b20fid)*k[1]**2*k[2]**2 - 1.*(5. + 7.*b10fid)*k[2]**4 + (3. + 7.*b10fid)*k[0]**2*(k[1]**2 + k[2]**2))*(7.*b20fid*q**3 + 7.*(1. + b10fid)*k[1]**3*x - 14.*b20fid*k[1]*q**2*x + k[1]**2*q*(3. + 7.*b20fid - 10.*x**2 + b10fid*(7. - 14.*x**2)))*Fshape(k[1],q,np.sqrt(k[1]**2 + q**2 - 2.*k[1]*q*x)))/(2.718281828459045**(0.5*Rfid**2*(2.*k[1]**2 + k[2]**2 + 2.*q**2 - 2.*k[1]*q*x))*k[1]**2*(k[1]**2 + q**2 - 2.*k[1]*q*x)))*P(k[2]))/(2.718281828459045**(0.5*k[2]**2*Rfid**2)*k[2]**2)))/2.718281828459045**(0.16666666666666666*(k[0]**2 + k[1]**2 + k[2]**2)*sigfid**2),(0.03571428571428571*(1. + b10fid)*(2.718281828459045**(k[0]**2*Rfid**2)*k[0]**2*(4.*k[0]**4 - 1.*(17. + 21.*b10fid)*k[1]**4 + 2.*(17. + 21.*b10fid + 14.*b20fid)*k[1]**2*k[2]**2 - 1.*(17. + 21.*b10fid)*k[2]**4 + (13. + 21.*b10fid)*k[0]**2*(k[1]**2 + k[2]**2))*P(k[1])*P(k[2]) + P(k[0])*(2.718281828459045**(k[2]**2*Rfid**2)*k[2]**2*((-17. - 21.*b10fid)*k[0]**4 - 1.*(k[1]**2 - 1.*k[2]**2)*((17. + 21.*b10fid)*k[1]**2 + 4.*k[2]**2) + k[0]**2*((34. + 42.*b10fid + 28.*b20fid)*k[1]**2 + (13. + 21.*b10fid)*k[2]**2))*P(k[1]) + 2.718281828459045**(k[1]**2*Rfid**2)*k[1]**2*((-17. - 21.*b10fid)*k[0]**4 + (k[1]**2 - 1.*k[2]**2)*(4.*k[1]**2 + (17. + 21.*b10fid)*k[2]**2) + k[0]**2*((13. + 21.*b10fid)*k[1]**2 + 2.*(17. + 21.*b10fid + 14.*b20fid)*k[2]**2))*P(k[2]))))/(2.718281828459045**(0.16666666666666666*(k[0]**2 + k[1]**2 + k[2]**2)*(6.*Rfid**2 + sigfid**2))*k[0]**2*k[1]**2*k[2]**2*(qmax - 1.*qmin)),(0.5*(1. + b10fid)**2*(2.718281828459045**(k[0]**2*Rfid**2)*P(k[1])*P(k[2]) + P(k[0])*(2.718281828459045**(k[2]**2*Rfid**2)*P(k[1]) + 2.718281828459045**(k[1]**2*Rfid**2)*P(k[2]))))/(2.718281828459045**(0.16666666666666666*(k[0]**2 + k[1]**2 + k[2]**2)*(6.*Rfid**2 + sigfid**2))*(qmax - 1.*qmin)),(-0.011904761904761904*(1. + b10fid)**2*(k[0]**2 + k[1]**2 + k[2]**2)*sigfid*(2.718281828459045**(k[0]**2*Rfid**2)*k[0]**2*(2.*k[0]**4 - 1.*(5. + 7.*b10fid)*k[1]**4 + 2.*(5. + 7.*b10fid + 7.*b20fid)*k[1]**2*k[2]**2 - 1.*(5. + 7.*b10fid)*k[2]**4 + (3. + 7.*b10fid)*k[0]**2*(k[1]**2 + k[2]**2))*P(k[1])*P(k[2]) + P(k[0])*(2.718281828459045**(k[2]**2*Rfid**2)*k[2]**2*((-5. - 7.*b10fid)*k[0]**4 - 1.*(k[1]**2 - 1.*k[2]**2)*((5. + 7.*b10fid)*k[1]**2 + 2.*k[2]**2) + k[0]**2*(2.*(5. + 7.*b10fid + 7.*b20fid)*k[1]**2 + (3. + 7.*b10fid)*k[2]**2))*P(k[1]) + 2.718281828459045**(k[1]**2*Rfid**2)*k[1]**2*((-5. - 7.*b10fid)*k[0]**4 + (k[1]**2 - 1.*k[2]**2)*(2.*k[1]**2 + (5. + 7.*b10fid)*k[2]**2) + k[0]**2*((3. + 7.*b10fid)*k[1]**2 + 2.*(5. + 7.*b10fid + 7.*b20fid)*k[2]**2))*P(k[2]))))/(2.718281828459045**(0.16666666666666666*(k[0]**2 + k[1]**2 + k[2]**2)*(6.*Rfid**2 + sigfid**2))*k[0]**2*k[1]**2*k[2]**2*(qmax - 1.*qmin)),(0.07142857142857142*(1. + b10fid)**2*Rfid*(2.718281828459045**(k[0]**2*Rfid**2)*k[0]**4*(2.*k[0]**4 - 1.*(5. + 7.*b10fid)*k[1]**4 + 2.*(5. + 7.*b10fid + 7.*b20fid)*k[1]**2*k[2]**2 - 1.*(5. + 7.*b10fid)*k[2]**4 + (3. + 7.*b10fid)*k[0]**2*(k[1]**2 + k[2]**2))*P(k[1])*P(k[2]) + P(k[0])*(2.718281828459045**(k[2]**2*Rfid**2)*k[2]**4*((-5. - 7.*b10fid)*k[0]**4 - 1.*(k[1]**2 - 1.*k[2]**2)*((5. + 7.*b10fid)*k[1]**2 + 2.*k[2]**2) + k[0]**2*(2.*(5. + 7.*b10fid + 7.*b20fid)*k[1]**2 + (3. + 7.*b10fid)*k[2]**2))*P(k[1]) + 2.718281828459045**(k[1]**2*Rfid**2)*k[1]**4*((-5. - 7.*b10fid)*k[0]**4 + (k[1]**2 - 1.*k[2]**2)*(2.*k[1]**2 + (5. + 7.*b10fid)*k[2]**2) + k[0]**2*((3. + 7.*b10fid)*k[1]**2 + 2.*(5. + 7.*b10fid + 7.*b20fid)*k[2]**2))*P(k[2])) - 1.*(k[0]**2 + k[1]**2 + k[2]**2)*(2.718281828459045**(k[0]**2*Rfid**2)*k[0]**2*(2.*k[0]**4 - 1.*(5. + 7.*b10fid)*k[1]**4 + 2.*(5. + 7.*b10fid + 7.*b20fid)*k[1]**2*k[2]**2 - 1.*(5. + 7.*b10fid)*k[2]**4 + (3. + 7.*b10fid)*k[0]**2*(k[1]**2 + k[2]**2))*P(k[1])*P(k[2]) + P(k[0])*(2.718281828459045**(k[2]**2*Rfid**2)*k[2]**2*((-5. - 7.*b10fid)*k[0]**4 - 1.*(k[1]**2 - 1.*k[2]**2)*((5. + 7.*b10fid)*k[1]**2 + 2.*k[2]**2) + k[0]**2*(2.*(5. + 7.*b10fid + 7.*b20fid)*k[1]**2 + (3. + 7.*b10fid)*k[2]**2))*P(k[1]) + 2.718281828459045**(k[1]**2*Rfid**2)*k[1]**2*((-5. - 7.*b10fid)*k[0]**4 + (k[1]**2 - 1.*k[2]**2)*(2.*k[1]**2 + (5. + 7.*b10fid)*k[2]**2) + k[0]**2*((3. + 7.*b10fid)*k[1]**2 + 2.*(5. + 7.*b10fid + 7.*b20fid)*k[2]**2))*P(k[2])))))/(2.718281828459045**(0.16666666666666666*(k[0]**2 + k[1]**2 + k[2]**2)*(6.*Rfid**2 + sigfid**2))*k[0]**2*k[1]**2*k[2]**2*(qmax - 1.*qmin))))[param.index(par)]

###### SQUEEZED power spectrum derivative ######
def DP_sq_integrand(k,q,x,(fnlfid ,b10fid, b20fid, b01fid, b11fid, b02fid, chi1fid, w10fid, sigfid, Rfid),bng,par):
    return DP_integrand(k,q,x,(fnlfid ,b10fid, b20fid, b01fid, b11fid, b02fid, chi1fid, w10fid, sigfid, Rfid),par)


###### integrands for systematic shifts solutions  P ######

def a_integrand(k,q,x,(fnlfid ,b10fid, b20fid, b01fid, b11fid, b02fid, chi1fid, w10fid, sigfid, Rfid),index):
    return np.asarray(((0.125*((4.*P(k))/(2.718281828459045**(1.*k**2*Rfid**2)*(qmax - 1.*qmin)) + (0.10132118364233778*k**4*(q + k*x - 2.*q*x**2)**2*P(q)*P(np.sqrt(k**2 + q**2 - 2.*k*q*x)))/(2.718281828459045**(1.*Rfid**2*(k**2 + 2.*q**2 - 2.*k*q*x))*(k**2 + q**2 - 2.*k*q*x)**2)))/2.718281828459045**(0.3333333333333333*k**2*sigfid**2),0.012665147955292222*2.718281828459045**(-2.*q**2*Rfid**2 - 0.3333333333333333*k**2*(3.*Rfid**2 + sigfid**2) + 2.*k*q*Rfid**2*x)*q**2*P(q)*P(np.sqrt(k**2 + q**2 - 2.*k*q*x))))[index]

def b_integrand(k,q,x,(fnlfid ,b10fid, b20fid, b01fid, b11fid, b02fid, chi1fid, w10fid, sigfid, Rfid),index):
    return np.asarray(((0.125*((8.*P(k))/(2.718281828459045**(1.*k**2*Rfid**2)*(qmax - 1.*qmin)) + (0.028948909612096507*k**2*(q + k*x - 2.*q*x**2)*(3.*k**2*q + 7.*b20fid*k**2*q + 7.*b20fid*q**3 + 7.*k**3*x - 14.*b20fid*k*q**2*x - 10.*k**2*q*x**2)*P(q)*P(np.sqrt(k**2 + q**2 - 2.*k*q*x)))/(2.718281828459045**(1.*Rfid**2*(k**2 + 2.*q**2 - 2.*k*q*x))*(k**2 + q**2 - 2.*k*q*x)**2)))/2.718281828459045**(0.3333333333333333*k**2*sigfid**2),(-0.0036186137015120634*2.718281828459045**(-2.*q**2*Rfid**2 - 0.3333333333333333*k**2*(3.*Rfid**2 + sigfid**2) + 2.*k*q*Rfid**2*x)*k**2*q*(-3.*q - 7.*b10fid*q - 7.*k*x - 7.*b10fid*k*x + 10.*q*x**2 + 14.*b10fid*q*x**2)*P(q)*P(np.sqrt(k**2 + q**2 - 2.*k*q*x)))/(k**2 + q**2 - 2.*k*q*x)))[index]

def c_integrand(k,q,x,(fnlfid ,b10fid, b20fid, b01fid, b11fid, b02fid, chi1fid, w10fid, sigfid, Rfid),index):
    return np.asarray(((0.125*((4.*P(k))/(2.718281828459045**(1.*k**2*Rfid**2)*(qmax - 1.*qmin)) - (4.*(1. + b10fid)**2*P(k))/(2.718281828459045**(1.*k**2*Rfid**2)*(qmax - 1.*qmin)) + (0.0020677792580068933*(7.*b20fid*q**3 + 7.*k**3*x - 14.*b20fid*k*q**2*x + k**2*q*(3. + 7.*b20fid - 10.*x**2))**2*P(q)*P(np.sqrt(k**2 + q**2 - 2.*k*q*x)))/(2.718281828459045**(1.*Rfid**2*(k**2 + 2.*q**2 - 2.*k*q*x))*(k**2 + q**2 - 2.*k*q*x)**2) - (0.0020677792580068933*(7.*b20fid*q**3 + 7.*(1. + b10fid)*k**3*x - 14.*b20fid*k*q**2*x + k**2*q*(3. + 7.*b20fid - 10.*x**2 + b10fid*(7. - 14.*x**2)))**2*P(q)*P(np.sqrt(k**2 + q**2 - 2.*k*q*x)))/(2.718281828459045**(1.*Rfid**2*(k**2 + 2.*q**2 - 2.*k*q*x))*(k**2 + q**2 - 2.*k*q*x)**2)))/2.718281828459045**(0.3333333333333333*k**2*sigfid**2),(-0.0018093068507560317*2.718281828459045**(-2.*q**2*Rfid**2 - 0.3333333333333333*k**2*(3.*Rfid**2 + sigfid**2) + 2.*k*q*Rfid**2*x)*b20fid*q*(7.*b20fid*q**3 + 14.*(1. + b10fid)*k**3*x - 14.*b20fid*k*q**2*x + k**2*q*(6. + 7.*b20fid - 20.*x**2 + b10fid*(14. - 28.*x**2)))*P(q)*P(np.sqrt(k**2 + q**2 - 2.*k*q*x)))/(k**2 + q**2 - 2.*k*q*x)))[index]


###### integrands for systematic shifts solutions  B ######

def a0_integrand(k,q,x,(fnlfid ,b10fid, b20fid, b01fid, b11fid, b02fid, chi1fid, w10fid, sigfid, Rfid),index):
    return np.asarray(((0.03571428571428571*(2.718281828459045**(k[0]**2*Rfid**2)*k[0]**2*(2.*k[0]**4 - 5.*k[1]**4 + 2.*(5. + 7.*b20fid)*k[1]**2*k[2]**2 - 5.*k[2]**4 + 3.*k[0]**2*(k[1]**2 + k[2]**2))*P(k[1])*P(k[2]) + P(k[0])*(2.718281828459045**(k[2]**2*Rfid**2)*k[2]**2*(-5.*k[0]**4 - 5.*k[1]**4 + 3.*k[1]**2*k[2]**2 + 2.*k[2]**4 + k[0]**2*(2.*(5. + 7.*b20fid)*k[1]**2 + 3.*k[2]**2))*P(k[1]) + 2.718281828459045**(k[1]**2*Rfid**2)*k[1]**2*(-5.*k[0]**4 + 2.*k[1]**4 + 3.*k[1]**2*k[2]**2 - 5.*k[2]**4 + k[0]**2*(3.*k[1]**2 + 2.*(5. + 7.*b20fid)*k[2]**2))*P(k[2])) - 1.*(1. + b10fid)**2*(2.718281828459045**(k[0]**2*Rfid**2)*k[0]**2*(2.*k[0]**4 - 1.*(5. + 7.*b10fid)*k[1]**4 + 2.*(5. + 7.*b10fid + 7.*b20fid)*k[1]**2*k[2]**2 - 1.*(5. + 7.*b10fid)*k[2]**4 + (3. + 7.*b10fid)*k[0]**2*(k[1]**2 + k[2]**2))*P(k[1])*P(k[2]) + P(k[0])*(2.718281828459045**(k[2]**2*Rfid**2)*k[2]**2*((-5. - 7.*b10fid)*k[0]**4 - 1.*(k[1]**2 - 1.*k[2]**2)*((5. + 7.*b10fid)*k[1]**2 + 2.*k[2]**2) + k[0]**2*(2.*(5. + 7.*b10fid + 7.*b20fid)*k[1]**2 + (3. + 7.*b10fid)*k[2]**2))*P(k[1]) + 2.718281828459045**(k[1]**2*Rfid**2)*k[1]**2*((-5. - 7.*b10fid)*k[0]**4 + (k[1]**2 - 1.*k[2]**2)*(2.*k[1]**2 + (5. + 7.*b10fid)*k[2]**2) + k[0]**2*((3. + 7.*b10fid)*k[1]**2 + 2.*(5. + 7.*b10fid + 7.*b20fid)*k[2]**2))*P(k[2])))))/(2.718281828459045**(0.16666666666666666*(k[0]**2 + k[1]**2 + k[2]**2)*(6.*Rfid**2 + sigfid**2))*k[0]**2*k[1]**2*k[2]**2*(qmax - 1.*qmin)),(-0.5*(1. + b10fid)**2*b20fid*(2.718281828459045**(k[0]**2*Rfid**2)*P(k[1])*P(k[2]) + P(k[0])*(2.718281828459045**(k[2]**2*Rfid**2)*P(k[1]) + 2.718281828459045**(k[1]**2*Rfid**2)*P(k[2]))))/(2.718281828459045**(0.16666666666666666*(k[0]**2 + k[1]**2 + k[2]**2)*(6.*Rfid**2 + sigfid**2))*(qmax - 1.*qmin))))[index]

def a1_integrand(k,q,x,(fnlfid ,b10fid, b20fid, b01fid, b11fid, b02fid, chi1fid, w10fid, sigfid, Rfid),index):
    return np.asarray(((2.718281828459045**(k[0]**2*Rfid**2)*k[0]**2*(0.14285714285714285*k[0]**4 - 0.6071428571428571*k[1]**4 + (1.2142857142857142 + 1.*b20fid)*k[1]**2*k[2]**2 - 0.6071428571428571*k[2]**4 + k[0]**2*(0.46428571428571425*k[1]**2 + 0.46428571428571425*k[2]**2))*P(k[1])*P(k[2]) + P(k[0])*(2.718281828459045**(k[2]**2*Rfid**2)*k[2]**2*(-0.6071428571428571*k[0]**4 - 0.6071428571428571*k[1]**4 + 0.46428571428571425*k[1]**2*k[2]**2 + 0.14285714285714285*k[2]**4 + k[0]**2*((1.2142857142857142 + 1.*b20fid)*k[1]**2 + 0.46428571428571425*k[2]**2))*P(k[1]) + 2.718281828459045**(k[1]**2*Rfid**2)*k[1]**2*(-0.6071428571428571*k[0]**4 + 0.14285714285714285*k[1]**4 + 0.46428571428571425*k[1]**2*k[2]**2 - 0.6071428571428571*k[2]**4 + k[0]**2*(0.46428571428571425*k[1]**2 + (1.2142857142857142 + 1.*b20fid)*k[2]**2))*P(k[2])))/(2.718281828459045**(0.16666666666666666*(k[0]**2 + k[1]**2 + k[2]**2)*(6.*Rfid**2 + sigfid**2))*k[0]**2*k[1]**2*k[2]**2*(qmax - 1.*qmin)),(0.5*(1. + b10fid)**2*(2.718281828459045**(k[0]**2*Rfid**2)*P(k[1])*P(k[2]) + P(k[0])*(2.718281828459045**(k[2]**2*Rfid**2)*P(k[1]) + 2.718281828459045**(k[1]**2*Rfid**2)*P(k[2]))))/(2.718281828459045**(0.16666666666666666*(k[0]**2 + k[1]**2 + k[2]**2)*(6.*Rfid**2 + sigfid**2))*(qmax - 1.*qmin))))[index]

def a2_integrand(k,q,x,(fnlfid ,b10fid, b20fid, b01fid, b11fid, b02fid, chi1fid, w10fid, sigfid, Rfid),index):
    return np.asarray(((2.718281828459045**(k[0]**2*Rfid**2)*k[0]**2*(0.07142857142857142*k[0]**4 - 0.6785714285714285*k[1]**4 + (1.357142857142857 + 0.5*b20fid)*k[1]**2*k[2]**2 - 0.6785714285714285*k[2]**4 + k[0]**2*(0.6071428571428571*k[1]**2 + 0.6071428571428571*k[2]**2))*P(k[1])*P(k[2]) + P(k[0])*(2.718281828459045**(k[2]**2*Rfid**2)*k[2]**2*(-0.6785714285714285*k[0]**4 - 0.6785714285714285*k[1]**4 + 0.6071428571428571*k[1]**2*k[2]**2 + 0.07142857142857142*k[2]**4 + k[0]**2*((1.357142857142857 + 0.5*b20fid)*k[1]**2 + 0.6071428571428571*k[2]**2))*P(k[1]) + 2.718281828459045**(k[1]**2*Rfid**2)*k[1]**2*(-0.6785714285714285*k[0]**4 + 0.07142857142857142*k[1]**4 + 0.6071428571428571*k[1]**2*k[2]**2 - 0.6785714285714285*k[2]**4 + k[0]**2*(0.6071428571428571*k[1]**2 + (1.357142857142857 + 0.5*b20fid)*k[2]**2))*P(k[2])))/(2.718281828459045**(0.16666666666666666*(k[0]**2 + k[1]**2 + k[2]**2)*(6.*Rfid**2 + sigfid**2))*k[0]**2*k[1]**2*k[2]**2*(qmax - 1.*qmin)),0.))[index]

def a3_integrand(k,q,x,(fnlfid ,b10fid, b20fid, b01fid, b11fid, b02fid, chi1fid, w10fid, sigfid, Rfid),index):
    return np.asarray(((0.03571428571428571*(7.*2.718281828459045**(k[0]**2*Rfid**2)*k[0]**2*(-1.*(k[1]**2 - 1.*k[2]**2)**2 + k[0]**2*(k[1]**2 + k[2]**2))*P(k[1])*P(k[2]) + P(k[0])*(7.*2.718281828459045**(k[2]**2*Rfid**2)*k[2]**2*(-1.*k[0]**4 - 1.*k[1]**4 + k[1]**2*k[2]**2 + k[0]**2*(2.*k[1]**2 + k[2]**2))*P(k[1]) + 7.*2.718281828459045**(k[1]**2*Rfid**2)*k[1]**2*(-1.*k[0]**4 + k[2]**2*(k[1]**2 - 1.*k[2]**2) + k[0]**2*(k[1]**2 + 2.*k[2]**2))*P(k[2]))))/(2.718281828459045**(0.16666666666666666*(k[0]**2 + k[1]**2 + k[2]**2)*(6.*Rfid**2 + sigfid**2))*k[0]**2*k[1]**2*k[2]**2*(qmax - 1.*qmin)),0.))[index]
